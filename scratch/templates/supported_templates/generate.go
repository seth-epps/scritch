//go:build exclude

// This program generates supported.go.
package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"text/template"
	"time"
)

const supportedTemplatesDirectory = "supported_templates"

func main() {
	supportedTemplates, err := getSupportedTemplates()
	logAndDie(err)

	var buf bytes.Buffer

	err = packageTemplate.Execute(&buf, struct {
		Timestamp time.Time
		Supported []string
	}{
		Timestamp: time.Now(),
		Supported: supportedTemplates,
	})
	logAndDie(err)

	formatted, err := format.Source(buf.Bytes())
	logAndDie(err)

	file, err := os.Create("supported.go")
	logAndDie(err)

	_, err = file.Write(formatted)
	logAndDie(err)

	defer file.Close()
}

func logAndDie(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

// getSupportedTemplates returns a list of template names
// supported internally (ie, all sub-directories)
func getSupportedTemplates() ([]string, error) {
	items, err := os.ReadDir(supportedTemplatesDirectory)
	if err != nil {
		return nil, fmt.Errorf("failed to open directory `%v`: %w", supportedTemplatesDirectory, err)
	}

	var supported []string
	for _, item := range items {
		// the only non-directory item in this directory
		// should be current file
		if item.IsDir() {
			supported = append(supported, item.Name())
		}

	}

	return supported, nil
}

var packageTemplate = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// This file was generated at 
// {{ .Timestamp }}

package templates

import "embed"

//go:embed supported_templates/*
var templateFS embed.FS

var templateFSRoot string = "supported_templates"

var SupportedTemplates = []string{
	{{ range $template := .Supported -}}
	"{{ $template }}",
	{{ end }}}
`))
